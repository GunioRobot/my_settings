#compdef ctags etags

_ctags()
{
    _define_common_languages

    local args
    args=(
        '-a[Append the tags to an existing tag file]:append:(yes no)'
        '--append=[Append the tags to an existing tag file]:append:(yes no)'
        '-B[Use backward searching patterns]'
        '-e[Output tag file for use with Emacs]'
        '-f[Write tags to specified file]:tag file:_files'
        '-F[Use forward searching patterns (default)]'
        '-h[Specify list of file extensions to be treated as include files]:ext list:'
        '-I[A list of tokens to be specially handled, the command line or the specified file]:token list:_files'
        '-L[A list of source file names are read from the specified file]:source files:_files'
        '-n[Equivalent to --excmd=number]'
        '-N[Equivalent to --excmd=pattern]'
        '-o[Write tags to specified file]:tag file:_files'
        '-R[Recurse into directories]'
        '--recurse=[Recurse into directories]:recurse:(yes no)'
        '-u[Should tags be sorted (ignore case)]'
        '--sort=[Should tags be sorted (ignore case)]:sort:(yes no foldcase)'
        '-V[Enable verbose messages describing actions on each source file]'
        '--verbose=[Enable verbose messages describing actions on each source file]:verbose:(yes no)'
        '-x[Print a tabular cross reference file to standard output]'
        "--etags-include=[Include reference to 'file' in Emacs-style tag file (requires -e)]:etag file:_files"
        "--exclude=[Exclude files and directories matching 'pattern']:pattern:"
        '--excmd=[Uses the specified type of EX command to locate tags]:EX command:(number pattern mix)'
        '--extra=[Include extra tag entries for selected information]:extra tag flags:_extra_flags'
        '--fields=[Include selected extension fields]:field flags:_field_flags'
        '--file-scope=[Should tags scoped only for a single file]:file scope:(yes no)'
        '--filter=[Behave as a filter, reading file names from standard input and writing tags to standard output]:filter:(yes no)'
        '--filter-terminator=[Specify string to print to stdout following the tags for each file parsed]:terminator:'
        "--format=[Force output of specified tag file format]:format level:((1\:'the original tag file format' 2\:'a new extended format containing extension fields'))"
        '--help[Print this option summary]'
        '--if0=[Should C code within #if 0 conditional branches be parsed]:#if:(yes no)'
        '--langdef=[Define a new language to be parsed with regular expressions]:language definition:'
        '--langmap=[Override default mapping of language to source file extension]:language mapping:_langmap'
        '--language-force=[Force all files to be interpreted using specified language]:language force:_languages'
        '--languages=[Restrict files scanned for tags to those mapped to langauges]:languages:_flag_languages'
        '--license[Print details of software license]'
        '--line-directives=[Should #line directives be processed?]:line directives:(yes no)'
        '--links=[Indicate whether symbolic links should be followed]:symlinks:(yes no)'
        '--list-kinds=[Output a list of all tag kinds for specified language or all]:list kinds:_all_or_languages'
        '--list-languages[Output list of supported languages]'
        '--list-maps=[Output list of language mappings]:list maps:_all_or_languages'
        '--options=[Specify file from which command line options should be read]:command line files:_files'
        '--regex--[Define regular expression for locating tags in specific language]:regex:_regex_lang'
        '--tag-relative=[Should paths be relative to location of tag file?]:tag relative:(yes no)'
        '--totals=[Print statistics about source and tag files]:totals:(yes no)'
        '--version[Print version identifier to standard output]'
        '::target:_files'
    )

    # language kinds
    for lang in ${_common_languages}; do
        args=( ${args} "--${lang}-kinds=:language kinds:_lang_kinds" )
    done

    _arguments $args
}

_complete_flags()
{
    local _current_str _current_flags _base_flags _all_flags
    _current_str=${words[CURRENT]##*=}
    for i in {1..${#_current_str}}; do
        _current_flags=( ${_current_flags} ${_current_str[$i]} )
    done

    _base_flags=( $@ )

    if [[ -z ${_current_str} ]]; then
        _base_flags=( ${_base_flags} "+" "-" )
    fi

    local _flag_name
    for flag in ${_base_flags}; do
        _flag_name=${flag%:*}
        if [[ -z ${_current_str[(r)${_flag_name}]} ]]; then
            _all_flags=( ${_all_flags} ${flag} )
        fi
    done

    if [[ -n ${_current_str} ]]; then
        _all_flags=( ${_all_flags} ' ' )
    fi

    if [[ -z ${_current_str} ]]; then
        _describe -t flags "flags" _all_flags || compadd "$@"
    else
        _describe -t flags "flags" _all_flags -Q -P ${_current_str} || compadd "$@"
    fi
}

(( $+functions[_extra_flags()] )) || _extra_flags()
{
    _flags=(
        'f:Include an entry for the base file name of every source file'
        'q:Include an extra class-qualified tag entry for each tag which is a member of a class'
    )

    _complete_flags ${_flags}
}

(( $+functions[_field_flags()] )) || _field_flags()
{
    _flags=(
        'a:Access (or export) of class members'
        'f:File-restricted scoping [enabled]'
        'i:Inheritance information'
        'k:Kind of tag as a single letter [enabled]'
        'K:Kind of tag as full name'
        'l:Language of source file containing tag'
        'm:Implementation information'
        'n:Line number of tag definition'
        's:Scope of tag definition [enabled]'
        'S:Signature of routine (e.g. prototype or parameter list)'
        'z:Include the "kind:" key in kind field'
        't:Type and name of a variable or typedef as "typeref:" field [enabled]'
    )

    _complete_flags ${_flags}
}

(( $+functions[_define_common_languages()] )) || _define_common_languages()
{
    _common_languages=( $(ctags --list-languages 2> /dev/null | tr '[A-Z]' '[a-z]' | uniq) )
}

(( $+functions[_update_all_languages()] )) || _update_all_languages()
{
    _all_languages=( ${_common_languages} )

    if [[ -n ${words[(r)--langdef=*]} ]]; then
        local _lang
        _lang=${words[(r)--langdef=*]}
        _all_languages=( ${_common_languages} ${_lang##*=} )
    fi
}

(( $+functions[_languages()] )) || _languages()
{
    _update_all_languages

    compadd "$@" -a -Q -- _all_languages
}

(( $+functions[_langmap()] )) || _langmap()
{
    _update_all_languages

    local _current_str
    _current_str=${words[CURRENT]##*=}

    local _prefix
    _prefix="${_current_str%,*}"

    if [[ ${_prefix} != ${_current_str} ]]; then
        _prefix="${_prefix},"

        compadd "$@" -a -Q -P ${_prefix} -S ":" -- _all_languages
    else
        compadd "$@" -a -Q -S ":" -- _all_languages
    fi
}

(( $+functions[_flag_languages()] )) || _flag_languages()
{
    _update_all_languages

    local _current_str
    _current_str=${words[CURRENT]##*=}

    if [[ -z ${_current_str} ]]; then
        local _languages
        _languages=( '+' '-' ${_all_languages} )

        compadd "$@" -a -- _languages
    else
        local _prefix
        _prefix="${_current_str%,*}"
        if [[ ${_prefix} != ${_current_str} ]]; then
            _prefix="${_prefix},"
        else
            if [[ ${_current_str[1]} == '+' ]]; then
                _prefix='+'
            elif [[ ${_current_str[1]} == '-' ]]; then
                _prefix='-'
            else
                _prefix=""
            fi
        fi

        if [[ -z ${_prefix} ]]; then
            compadd "$@" -Q -S "" -a -- _all_languages
        else
            compadd "$@" -Q -P ${_prefix} -S "" -a -- _all_languages
        fi
    fi
}

(( $+functions[_all_or_languages()] )) || _all_or_languages()
{
    _update_all_languages

    local _languages
    _languages=( 'all' ${_all_languages} )

    compadd "$@" -a -Q -- _languages
}

(( $+functions[_regex_lang()] )) || _regex_lang()
{
    _update_all_languages

    local _current_str
    _current_str=${words[CURRENT]}

    local _prefix

    if [[ -z ${_current_str[(r)=]} ]]; then
        compadd "$@" -a -Q -S '=/' -- _all_languages
    else
        if (( ${#_current_str} - ${#_current_str:gs/\///} >= 3 )); then
            local _flags _current_flags _base_flags _flag_name
            _base_flags=(
                'b:The pattern is interpreted as a Posix basic regular expression'
                'e:The pattern is interpreted as a Posix extended regular expression'
                'i:The regular expression is to be applied in a case-insensitive manner'
            )

            _current_flags=${_current_str##*/}
            for flag in ${_base_flags}; do
                _flag_name=${flag%%:*}
                if [[ -z ${_current_flags[(r)${_flag_name}]} ]]; then
                    _flags=( ${_flags} ${flag} )
                fi
            done

            if [[ -n ${_current_flags} ]]; then
                _flags=( ${_flags} ' ' )
            fi

            _prefix="${_current_str#--regex-}"

            _describe -t regflags "regex flags" _flags -Q -P ${_prefix} || compadd "$@"
        fi
    fi
}

(( $+functions[_lang_kinds()] )) || _lang_kinds()
{
    local _current_str _language _base_flags _flags _current_flags
    _current_str=${words[CURRENT]}
    _language=${${_current_str#--}%%-*}

    for flag in $(ctags --list-kinds=${_language} 2> /dev/null | uniq | sed -e 's/  /:/' | sed -e 's/ /_/g'); do
        _base_flags=( ${_base_flags} "${flag:gs/_/ /}" )
    done

    _current_flags=${_current_str##*=}

    if [[ -z ${_current_flags} ]]; then
        _flags=( ${_base_flags} '+' '-' )
    else
        local _flag_name
        for flag in ${_base_flags}; do
            _flag_name=${flag%%:*}
            if [[ -z ${_current_flags[(r)${_flag_name}]} ]]; then
                _flags=( ${_flags} ${flag} )
            fi
        done

        if [[ ${_current_flags} != '+' && ${_current_flags} != '-' ]]; then
            _flags=( ${_flags} ' ' )
        fi
    fi

    if [[ -z ${_current_flags} ]]; then
        _describe -t kinds "${_language}-kinds" _flags || compadd "$@"
    else
        _describe -t kinds "${_language}-kinds" _flags -Q -P ${_current_flags} || compadd "$@"
    fi
}
